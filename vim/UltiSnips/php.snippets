snippet php "PHP open tag"
<?php

$1
endsnippet

#################
# Class related #
#################

snippet get "PHP Class Getter" b
/**
 * Getter for $1
 *
 * @return ${2:string}
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;
}
endsnippet

snippet set "PHP Class Setter" b
/**
 * Setter for $1
 *
 * @param ${2:string} $$1
 * @return ${3:`!p snip.rv=snip.basename`}
 */
public function set${1/\w+\s*/\u$0/}(${4:${2/(void|string|int|integer|double|float|object|boolear|null|mixed|number|resource)|(.*)/(?1::$2 )/}}$$1)
{
    $this->$1 = $$1;

    ${5:return $this;}
}
endsnippet

snippet getset "PHP Class Getter Setter" b
/**
 * Getter for $1
 *
 * @return ${2:string}
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;
}

/**
 * Setter for $1
 *
 * @param $2 $$1
 * @return ${3:`!p snip.rv=snip.basename`}
 */
public function set${1/\w+\s*/\u$0/}(${4:${2/(void|string|int|integer|double|float|object|boolear|null|mixed|number|resource)|(.*)/(?1::$2 )/}}$$1)
{
    $this->$1 = $$1;

    ${5:return $this;}
}
endsnippet

snippet pub "Public function" b
/**
 * ${3:Undocumented function}
 *
 * @return ${4:void}
 */
public function ${1:name}(${2:$param})
{
    ${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pro "Protected function" b
/**
 * ${3:Undocumented function}
 *
 * @return ${4:void}
 */
protected function ${1:name}(${2:$param})
{
    ${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pri "Private function" b
/**
 * ${3:Undocumented function}
 *
 * @return ${4:void}
 */
private function ${1:name}(${2:$param})
{
    ${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pubs "Public static function" b
/**
 * ${3:Undocumented function}
 *
 * @return ${4:void}
 */
public static function ${1:name}(${2:$param})
{
    ${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pros "Protected static function" b
/**
 * ${3:Undocumented function}
 *
 * @return ${4:void}
 */
protected static function ${1:name}(${2:$param})
{
    ${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pris "Private static function" b
/**
 * ${3:Undocumented function}
 *
 * @return ${4:void}
 */
private static function ${1:name}(${2:$param})
{
    ${VISUAL}${5:return null;}
}
$0
endsnippet

snippet fu "Function snip" b
function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet new "New class instance" b
$${1:variableName} = new ${2:${1/\w+\s*/\u$0/}}($3);
$0
endsnippet

snippet ns "namespace declaration" b
namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
    snip.rv = m.group().replace('/', '\\')
`};
endsnippet

snippet class "Class declaration template" b
namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
    snip.rv = m.group().replace('/', '\\')
`};

/**
 * Class ${1:`!p snip.rv=snip.basename`}
 *
 * ${2:@author ${3}}
 * ${4:@package ${5}}
 */
class $1
{
    $6
}
endsnippet

snippet interface "Interface declaration template" b
namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
    snip.rv = m.group().replace('/', '\\')
`};

/**
 * Interface ${1:`!p snip.rv=snip.basename`}
 *
 * ${2:@author ${3}}
 * ${4:@package ${5}}
 */
interface $1
{
    public function ${6:someFunction}();$7
}
endsnippet

snippet trait "Trait declaration template" b
namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
    snip.rv = m.group().replace('/', '\\')
`};

/**
 * Trait ${1:`!p snip.rv=snip.basename`}
 *
 * ${2:@author ${3}}
 * ${4:@package ${5}}
 */
trait $1
{
}
endsnippet

snippet ctor "__construct()" b
/**
 * @param $2mixed ${1/, /\n     * \@param mixed /g}
 */
public function __construct(${1:$dependencies})
{${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}
$0
endsnippet
